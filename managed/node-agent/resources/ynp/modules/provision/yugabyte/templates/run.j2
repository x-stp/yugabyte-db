# Check if the user already exists
if id "{{ yb_user }}" &>/dev/null; then
    echo "User {{ yb_user }} already exists"
else
    # Creating the yb_user
    useradd -u {{ yb_user_id }} -s /bin/bash --create-home --home-dir {{ yb_home_dir }} {{ yb_user }}
    chown -R {{ yb_user }}:{{ yb_user }} {{ yb_home_dir }}
    chmod -R 711 {{ yb_home_dir }}
    echo "User {{ yb_user }} created"
fi

# Check if yb_user_password is not null
if [ -n "{{ yb_user_password }}" ]; then
    # Set the password for the new user if it needs to be updated
    current_password=$(getent shadow {{ yb_user }} | cut -d: -f2)
    new_password=$(openssl passwd -1 "{{ yb_user_password }}")

    if [[ "$current_password" != "$new_password" ]]; then
        echo '{{ yb_user }}:{{ yb_user_password }}' | chpasswd
        echo "Password for {{ yb_user }} updated"
    else
        echo "Password for {{ yb_user }} is already set"
    fi
fi

# Add yugabyte user to systemd-journal group if not already a member
if groups {{ yb_user }} | grep -q "\bsystemd-journal\b"; then
    echo "User {{ yb_user }} is already in the systemd-journal group"
else
    usermod -aG systemd-journal {{ yb_user }}
    echo "User {{ yb_user }} added to systemd-journal group"
fi

# Determine the PLATFORM_ID
platform_id=$(grep -oP '(?<=^PLATFORM_ID=).+' /etc/os-release | tr -d '"')

if [[ "$platform_id" == "platform:el8" ]]; then
    # Check SELinux status
    SELINUX_STATUS=$(sestatus | grep 'SELinux status' | awk '{print $3}')
    if [[ "$SELINUX_STATUS" == "enabled" ]]; then
        # Configuring the correct SELinux context
        current_context=$(ls -Zd "{{ yb_home_dir }}" | awk '{print $1}' | cut -d: -f3)
        if [[ "$current_context" != "ssh_home_t" ]]; then
            chcon -R -t ssh_home_t "{{ yb_home_dir }}"
            echo "SELinux context for {{ yb_home_dir }} changed to ssh_home_t"
        else
            echo "SELinux context for {{ yb_home_dir }} is already set to ssh_home_t"
        fi
    fi
else
    echo "el8 not detected, skipping changing selinux context"
fi

{% if is_install_node_agent == 'True' %}
installer_dir="{{ ynp_dir }}/../../bin"
# Copy node-agent binary to yugabyte home directory. This is needed so that yugabyte user
# can read the binary in restricted environment.
mkdir -p {{ yb_home_dir }}/.install
cp "$installer_dir/node-agent-installer.sh" {{ yb_home_dir }}/.install
chown -R {{ yb_user }}:{{ yb_user }} {{ yb_home_dir }}/.install
{% endif %}

# Ensure the permissions for yb_home_dir are 750
chmod 750 "{{ yb_home_dir }}"
